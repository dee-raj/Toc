import re
def cipher_encryption():
    msg = input("Enter message: ")
    rails = int(input("Enter no of rails: "))

    # removing white space from message
    msg = msg.replace(" ", "")
    # creating an empty matrix
    # railMatrix = [['.' for column in range(len(msg))] for row in range(rails)]
    railMatrix =[]
    for i in range(rails):
        railMatrix.append([])
    for row in range(rails):
        for column in range(len(msg)):
            railMatrix[row].append('.')
    # putting letters of message one by one in the matrix in zig-zag
    row = 0 
    check = 0
    for i in range(len(msg)):
        if check == 0:
            railMatrix[row][i] = msg[i]
            row += 1
            if row == rails:
                check = 1
                row -= 1
            #inner if
        elif check == 1:
            row -= 1
            railMatrix[row][i] = msg[i]
            if row == 0:
                check = 0
                row = 1
    encryptedText = ""
    for i in range(rails):
        for j in range(len(msg)):
            encryptedText += railMatrix[i][j]
    
    #for
    # removing '.' from encrypted text
    encryptedText = re.sub(r"\.", "", encryptedText)
    print(f"Encrypted text: {encryptedText}")

def cipher_decryption():
    msg = input("Enter message: ")
    rails = int(input("Enter no. of rails: "))
    
    # removing white space from message
    msg = msg.replace(" ", "")
    # creating an empty matrix
    # railMatrix = [['.' for column in range(len(msg))] for row in range(rails)]
    railMatrix =[]
    for i in range(rails):
        railMatrix.append([])
    for row in range(rails):
        for column in range(len(msg)):
            railMatrix[row].append('.')
    # putting letters of message one by one in the matrix in zig-zag
    row = 0 
    check = 0
    for i in range(len(msg)):
        if check == 0:
            railMatrix[row][i] = msg[i]
            row += 1
            if row == rails:
                check = 1
                row -= 1
            #inner if
        elif check == 1:
            row -= 1
            railMatrix[row][i] = msg[i]
            if row == 0:
                check = 0
                row = 1
            # inner if
        # else-if
    # reordering the matrix
    order = 0
    for i in range(rails):
        for j in range(len(msg)):
            temp = railMatrix[i][j]
            if re.search("\\.", temp):
                # skipping '.'
                continue
            else:
                railMatrix[i][j] = msg[order]
                order += 1
            # if-else
        # inner for
    # for
    # testing matrix reorder
    for i in railMatrix:
        for column in i:
            print(column, end='')
        # inner for
        print("\n")
    # for
    # putting reordered matrix into decrypted text string to get decrypted text
    check = 0
    row = 0
    decryptedText = ""
    for i in range(len(msg)):
        if check == 0:
            decryptedText += railMatrix[row][i]
            row += 1
            if row == rails:
                check = 1
                row -= 1
            # inner if
        elif check == 1:
            row -= 1
            decryptedText += railMatrix[row][i]
            if row == 0:
                check = 0
                row = 1
            # inner if
        # else-if
    # for
    decryptedText = re.sub(r"\.", "", decryptedText)
    print(f"De-crypted message: {decryptedText}")

def main():
    choice = int(input("for Encryption: 1\nfor Decryption: 2\n"))
    if choice == 1:
        print("---Encryption Choosen---")
        cipher_encryption()
    elif choice == 2:
        print("---Decryption Choosen---")
        cipher_decryption()
    else:
        print("---INVALID CHOISE---")

if __name__ == "__main__":
    main()